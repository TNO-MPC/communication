from typing import Text, Tuple, Union

class mpz(int):
    def __new__(
        self, x: Union[Text, bytes, bytearray, int], base: int = ...
    ) -> "mpz": ...

class xmpz(int):
    def __new__(
        self, x: Union[Text, bytes, bytearray, int], base: int = ...
    ) -> "xmpz": ...

class mpq:
    def __new__(self, n: Union[Text, int], m: int = ..., base: int = ...) -> "mpq": ...

class mpfr:
    def __new__(
        self, n: Union[Text, float], precision: int = ..., base: int = ...
    ) -> "mpfr": ...

class mpc(complex):
    def __new__(
        self,
        c: Union[Text, complex, int, Tuple[int, int]],
        i: int = ...,
        precision: int = ...,
        base: int = ...,
    ) -> "mpc": ...

def to_binary(a: Union[xmpz, mpz, mpfr, mpq, mpc]) -> bytes: ...
def from_binary(b: bytes) -> Union[xmpz, mpz, mpfr, mpq, mpc]: ...
